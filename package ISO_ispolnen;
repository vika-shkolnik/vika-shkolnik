package ISO_ispolnen;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.annotations.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class contractISO2sig {

    @Test
    public static void contractISO() throws TransformerException, AWTException, IOException, ParserConfigurationException, SAXException, InterruptedException {

        File file = new File("C:\\Signer_old\\xml\\DocumentsForAutotests\\contractISO.xml");
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document doc = builder.parse(file);


        assert doc != null;
        Node rootNode = doc.getFirstChild();//получаем первый элемент Document
        NodeList rootChilds = rootNode.getChildNodes(); // получаем его чайлдов - CstmrPmtCxlReq


        Node firstNode = null;
        for (int i = 0; i < rootChilds.getLength(); i++) {
            if (rootChilds.item(i).getNodeName().equals("CtrctRegnReq")) {
                if (rootChilds.item(i).getNodeType() == Node.ELEMENT_NODE) { //чтобы убрать лишние пробелы и тд пишем условие
                    firstNode = rootChilds.item(i); //запоминаем -<CtrctRegnReq

                }
            }
        }

        assert firstNode != null;
        NodeList firstNodeChilds = firstNode.getChildNodes();
        Node secondNode = null;
        Node thourstNode = null;
        for (int i = 0; i < firstNodeChilds.getLength(); i++) {
            if (firstNodeChilds.item(i).getNodeName().equals("CtrctRegn")) {
                secondNode = firstNodeChilds.item(i);

            }

            if (firstNodeChilds.item(i).getNodeName().equals("SplmtryData")) {
                thourstNode = firstNodeChilds.item(i); //запоминаем SplmtryData
                thourstNode.getParentNode().removeChild(thourstNode);
            }

        }
        assert secondNode != null;
        Node thirstNode = null;
        NodeList secondNodeChilds = secondNode.getChildNodes();
        for (int i = 0; i < secondNodeChilds.getLength(); i++) {
            if (secondNodeChilds.item(i).getNodeName().equals("CtrctRegnOpng")) {
                thirstNode=secondNodeChilds.item(i);
            }
        }

        assert thirstNode != null;
        NodeList thirstNodeChilds = thirstNode.getChildNodes();
        for (int i = 0; i < thirstNodeChilds.getLength(); i++) {
            if (thirstNodeChilds.item(i).getNodeName().equals("CtrctRegnOpngId")) {
               thirstNodeChilds.item(i).setTextContent(CtrctRegnOpngId());
            }
        }


            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult file1 = new StreamResult(new File("C:\\Signer_old\\xml\\DocumentsForAutotests\\contractISO.xml"));
            transformer.transform(source, file1);


            Runtime rt = Runtime.getRuntime();
            try {
                rt.exec(new String[]{"C:\\Signer_old\\xml\\AutoTests\\Settings\\Winium.Desktop.Driver.exe"});
            } catch (IOException e) {
                System.out.println("Что-то с драйвером Winium!");
                System.exit(1);
            }

            DesiredCapabilities cap = new DesiredCapabilities();
            cap.setCapability("app", "C:\\Windows\\System32\\cmd.exe"); //если хотим сразу запускать какую-либо программу
            //Thread.sleep(5000);

            WebDriver driver = null; //на этом порту по умолчанию висит Winium драйвер
            try {
                driver = new RemoteWebDriver(new URL("http://localhost:9999"), cap);
            } catch (MalformedURLException e) {
                System.out.println("Что-то с хостом!");
                System.exit(1);
            }
            WebElement element = driver.findElement(By.className("ConsoleWindowClass"));
            element.sendKeys("cd C:\\Signer_old");

            Robot r = new Robot();
            r.keyPress(KeyEvent.VK_ENTER);
            r.keyRelease(KeyEvent.VK_ENTER);

            element.sendKeys("sign_jcsp_client3_1 xml\\DocumentsForAutotests\\contractISO.xml xml\\DocumentsForAutotests\\contractISO.xml");

            r.keyPress(KeyEvent.VK_ENTER);
            r.keyRelease(KeyEvent.VK_ENTER);

            WebElement close = driver.findElement(By.name("Close the program"));
            close.click();

        Thread.sleep(140000);

        element.sendKeys("sign_jcsp_client3_2 xml\\DocumentsForAutotests\\contractISO.xml xml\\DocumentsForAutotests\\contractISO.xml");

        r.keyPress(KeyEvent.VK_ENTER);
        r.keyRelease(KeyEvent.VK_ENTER);

        Thread.sleep(140000);

        contractISO2sig.DoPackageArchive();
    }

        public static String CtrctRegnOpngId() {
            Random random = new Random(System.currentTimeMillis());
            StringBuilder uuid = new StringBuilder();
            for (int i=0;i<20;i++){
                int subNum = random.nextInt(9);
                uuid.append(subNum);
            }
            //System.out.println(uuid);
            return uuid.toString();
        }
    public static void DoPackageArchive() throws IOException {


        List<String> srcFiles = Arrays.asList("C:\\Signer_old\\xml\\DocumentsForAutotests\\contractISO.xml", "C:\\Signer_old\\xml\\DocumentsForAutotests\\TEST_45.pdf");
        FileOutputStream fos = new FileOutputStream("C:\\Signer_old\\xml\\DocumentsForAutotests\\contractISO.zip");
        ZipOutputStream zipOut = new ZipOutputStream(fos);
        for (String srcFile : srcFiles) {
            File fileToZip = new File(srcFile);
            FileInputStream fis = new FileInputStream(fileToZip);
            ZipEntry zipEntry = new ZipEntry(fileToZip.getName());
            zipOut.putNextEntry(zipEntry);

            byte[] bytes = new byte[1024];
            int length;
            while((length = fis.read(bytes)) >= 0) {
                zipOut.write(bytes, 0, length);
            }
            fis.close();
        }
        zipOut.close();
        fos.close();
    }
    
    
  

}
